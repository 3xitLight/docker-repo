.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Linux::DesktopFiles 3"
.TH Linux::DesktopFiles 3 "2020-05-26" "perl v5.30.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Linux::DesktopFiles \- Fast parsing of the Linux desktop files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Linux::DesktopFiles;
\&  my $obj = Linux::DesktopFiles\->new( terminalize => 1 );
\&  print join("\en", $obj\->get_desktop_files);
\&  my $hash_ref = $obj\->parse_desktop_files;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Linux::DesktopFiles\*(C'\fR, a very fast and simple way to parse the Linux desktop files.
.SH "CONSTRUCTOR METHODS"
.IX Header "CONSTRUCTOR METHODS"
The following constructor methods are available:
.ie n .IP "$obj = Linux::DesktopFiles\->new( %options )" 4
.el .IP "\f(CW$obj\fR = Linux::DesktopFiles\->new( \f(CW%options\fR )" 4
.IX Item "$obj = Linux::DesktopFiles->new( %options )"
This method constructs a new \f(CW\*(C`Linux::DesktopFiles\*(C'\fR object and returns it.
Key/value pair arguments may be provided to set up the initial state.
.Sp
By default,
.Sp
.Vb 1
\&    Linux::DesktopFiles\->new();
.Ve
.Sp
is equivalent with:
.Sp
.Vb 1
\&    Linux::DesktopFiles\->new(
\&
\&        terminal               => $ENV{TERM},
\&        terminalize            => 0,
\&        terminalization_format => "%s \-e \*(Aq%s\*(Aq",
\&
\&        skip_entry       => [],
\&        skip_filename_re => [],
\&        substitutions    => [],
\&
\&        desktop_files_paths => [\*(Aq/usr/local/share/applications\*(Aq,
\&                                \*(Aq/usr/share/applications\*(Aq],
\&
\&        keys_to_keep        => ["Name", "Exec", "Icon"],
\&        categories          => [qw( Utility
\&                                    Development
\&                                    Education
\&                                    Game
\&                                    Graphics
\&                                    AudioVideo
\&                                    Network
\&                                    Office
\&                                    Settings
\&                                    System
\&                               )],
\&
\&        case_insensitive_cats   => 0,
\&        keep_unknown_categories => 0,
\&        unknown_category_key    => \*(AqOther\*(Aq,
\&      );
.Ve
.SS "Main options"
.IX Subsection "Main options"
.IP "desktop_files_paths => ['dir1', 'dir2', ...]" 4
.IX Item "desktop_files_paths => ['dir1', 'dir2', ...]"
Sets the directories where to find the desktop files.
.IP "keys_to_keep => [qw(Name Exec Icon Comment ...)]" 4
.IX Item "keys_to_keep => [qw(Name Exec Icon Comment ...)]"
Any valid keys from the desktop files to keep in the results from \f(CW\*(C`parse_desktop_file\*(C'\fR. The \fBCategories\fR key is implicitly included.
.IP "categories => [qw(Graphics Network AudioVideo ...)]" 4
.IX Item "categories => [qw(Graphics Network AudioVideo ...)]"
Any valid categories from the desktop files. Any category not listed will be ignored
or stored in the \fBunknown_category_key\fR when \f(CW\*(C`keep_unknown_categories\*(C'\fR is set to a true value.
.SS "Other options"
.IX Subsection "Other options"
.ie n .IP "keep_unknown_categories => $bool" 4
.el .IP "keep_unknown_categories => \f(CW$bool\fR" 4
.IX Item "keep_unknown_categories => $bool"
When an entry is not part of any specified category, it will be stored inside the
unknown category, specified by \fBunknown_category_key\fR.
.ie n .IP "unknown_category_key => $name" 4
.el .IP "unknown_category_key => \f(CW$name\fR" 4
.IX Item "unknown_category_key => $name"
Category name where to store the entries which do not belong to any specified category.
.ie n .IP "case_insensitive_cats => $bool" 4
.el .IP "case_insensitive_cats => \f(CW$bool\fR" 4
.IX Item "case_insensitive_cats => $bool"
This option makes the category names case insensitive, by lowercasing and replacing
any non-alphanumeric characters with an underscore. For example, \f(CW\*(C`X\-XFCE\*(C'\fR becomes \f(CW\*(C`x_xfce\*(C'\fR.
.ie n .IP "terminal => $command" 4
.el .IP "terminal => \f(CW$command\fR" 4
.IX Item "terminal => $command"
This terminal command will be used when \fBterminalize\fR is set to a true value.
.ie n .IP "terminalize => $bool" 4
.el .IP "terminalize => \f(CW$bool\fR" 4
.IX Item "terminalize => $bool"
When the value of \fBTerminal\fR is true, modify the \fBExec\fR value to something like:
.Sp
.Vb 1
\&    terminal \-e \*(Aqcommand\*(Aq
.Ve
.Sp
This option will include the \f(CW\*(C`Terminal\*(C'\fR key inside the \fBkeys_to_keep\fR array.
.IP "terminalization_format => q{%s \-e '%s'}" 4
.IX Item "terminalization_format => q{%s -e '%s'}"
Format used by \f(CW\*(C`sprintf()\*(C'\fR to terminalize a command which requires to be executed
inside a terminal.
.Sp
Used internally as:
.Sp
.Vb 1
\&    sprintf($self\->{terminalization_format}, $self\->{terminal}, $entry{Exec});
.Ve
.SS "Regex options"
.IX Subsection "Regex options"
.IP "skip_filename_re => qr/regex/" 4
.IX Item "skip_filename_re => qr/regex/"
Skip any desktop file if its file name matches the regex.
.Sp
\&\fB\s-1NOTE:\s0\fR File names are from the last slash to the end.
.IP "skip_entry  => [{key => 'KeyName', re => qr/REGEX/i}, {...}]" 4
.IX Item "skip_entry => [{key => 'KeyName', re => qr/REGEX/i}, {...}]"
Skip any desktop file if the value from a given key matches a regular expression.
.Sp
The \fBkey\fR can be any valid key from the desktop files.
.Sp
Example:
.Sp
.Vb 4
\&        skip_entry => [
\&            {key => \*(AqName\*(Aq, re => qr/(?:about|terminal)/i},
\&            {key => \*(AqExec\*(Aq, re => qr/xterm/},
\&        ],
.Ve
.IP "substitutions => [{key => 'KeyName', re => qr/REGEX/i, value => 'Value'}, {...}]" 4
.IX Item "substitutions => [{key => 'KeyName', re => qr/REGEX/i, value => 'Value'}, {...}]"
Substitute, by using a regex, in the returned values from desktop files.
.Sp
The \fBkey\fR can be any valid key from the desktop files.
.Sp
The \fBre\fR can be any valid regular expression. Anything matched by the regex, will be
replaced with the string stored in \fBvalue\fR.
.Sp
For global matching/substitution, set the \fBglobal\fR key to a true value.
.Sp
Example:
.Sp
.Vb 4
\&        substitutions => [
\&            {key => \*(AqExec\*(Aq, re => qr/xterm/,    value => \*(Aqsakura\*(Aq},
\&            {key => \*(AqExec\*(Aq, re => qr/\e$HOME\eb/, value => \*(Aq/my/home\*(Aq, global => 1},
\&        ],
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .IP "$obj\->\fBget_desktop_files()\fR" 4
.el .IP "\f(CW$obj\fR\->\fBget_desktop_files()\fR" 4
.IX Item "$obj->get_desktop_files()"
Returns a list with the absolute paths to all desktop files from \fBdesktop_files_paths\fR.
.Sp
In scalar context, returns an \s-1ARRAY\s0 reference.
.ie n .IP "$obj\->parse(\e%hash, @desktop_files)" 4
.el .IP "\f(CW$obj\fR\->parse(\e%hash, \f(CW@desktop_files\fR)" 4
.IX Item "$obj->parse(%hash, @desktop_files)"
Parse a list of desktop files into a \s-1HASH\s0 ref, where the keys of the \s-1HASH\s0 are
the categories from desktop files and the values are \s-1ARRAY\s0 references containing
information about each entry, as returned by \f(CW\*(C`parse_desktop_file()\*(C'\fR.
.ie n .IP "$obj\->parse_desktop_file($desktop_file)" 4
.el .IP "\f(CW$obj\fR\->parse_desktop_file($desktop_file)" 4
.IX Item "$obj->parse_desktop_file($desktop_file)"
Parse a given desktop file and return a key-value list as a result.
.Sp
Example:
.Sp
.Vb 1
\&    my %info = $obj\->parse_desktop_file($desktop_file);
.Ve
.Sp
where \f(CW%info\fR might look something like this:
.Sp
.Vb 6
\&    my %info = (
\&        Name       => "...",
\&        Exec       => "...",
\&        Icon       => "...",
\&        Categories => ["...", "...", "..."],
\&    );
.Ve
.Sp
When \fBkeep_unknown_categories\fR is true and a given entry does not belong to any category,
\&\f(CW\*(C`parse_desktop_file\*(C'\fR will set \fBCategories\fR to [\f(CW\*(C`unknown_category_key\*(C'\fR].
.Sp
Returns a \s-1HASH\s0 reference in scalar contenxt.
.Sp
When a given file cannot be parsed or its specified as \fIHidden\fR or \fINoDisplay\fR, an empty list is returned (undef in scalar context).
.ie n .IP "$obj\->\fBparse_desktop_files()\fR" 4
.el .IP "\f(CW$obj\fR\->\fBparse_desktop_files()\fR" 4
.IX Item "$obj->parse_desktop_files()"
It returns a \s-1HASH\s0 reference categorized on category names, with \s-1ARRAY\s0 references
as values, each \s-1ARRAY\s0 containing a \s-1HASH\s0 reference with the keys specified in the \fBkeys_to_keep\fR
option, and values from the desktop files.
.Sp
The returned \s-1HASH\s0 reference may look something like this:
.Sp
.Vb 4
\&        {
\&          Utility => [ {Exec => "...", Name => "..."}, {Exec => "...", Name => "..."} ],
\&          Network => [ {Exec => "...", Name => "..."}, {Exec => "...", Name => "..."} ],
\&        }
.Ve
.Sp
This function is equivalent with:
.Sp
.Vb 1
\&    $obj\->parse(\e%hash, $obj\->get_desktop_files);
.Ve
.Sp
In list contenxt, it returns a key-value list, while, in scalar context, it returns a \s-1HASH\s0 reference.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/trizen/Linux\-DesktopFiles>
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel \*(L"Trizen\*(R" Șuteu, <trizenx@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012\-2017
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.2 or,
at your option, any later version of Perl 5 you may have available.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::DesktopEntry and X11::FreeDesktop::DesktopEntry
